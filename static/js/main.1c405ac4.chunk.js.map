{"version":3,"sources":["components/StatusBar/index.jsx","components/Main/index.jsx","components/WebSocketServer/index.jsx","index.js"],"names":["StatusBar","this","props","status","server","info","connection","error","className","Component","Main","draw","state","id1","data","id2","array","graphArr","shift","push","legend","length","ID1","ID2","setState","map","item","idx","toString","hundred","number","socket","messages","Array","fill","WebSocket","onopen","onmessage","event","JSON","parse","onerror","err","message","close","onclose","wasClean","code","temperature","ResponsiveContainer","height","debounce","AreaChart","margin","top","right","left","bottom","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","label","value","angle","position","fontSize","fontWeight","Legend","iconSize","Tooltip","Area","type","stroke","strokeWidth","fillOpacity","animationDuration","animationEasing","React","WebSocketServer","src","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c405ac4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './statusBar.css';\r\n\r\nexport default class StatusBar extends Component {\r\n  render() {\r\n    const { server, info, error } = this.props.status;\r\n    let connection = error ? \"fail\" : \"good\";\r\n\r\n\t\treturn (\r\n\t\t\t<footer>\r\n        <span>\r\n          Copyright: <span className=\"primary\">Â© Wiliot, 2021&nbsp;&nbsp;</span>\r\n        </span>\r\n        <span>\r\n          Status: <span className={connection}>{info}&nbsp;</span>\r\n        </span>\r\n        <span>\r\n          Server: <span className=\"primary\">{server}&nbsp;</span>\r\n        </span>\r\n      </footer>\r\n\t\t);\r\n  }\r\n}","import React from 'react';\r\nimport StatusBar from '../StatusBar/';\r\nimport {\r\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, AreaChart, Area,\r\n} from 'recharts';\r\n\r\nimport './main.css';\r\n\r\nexport default class Main extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {      \r\n      socket: 'ws://localhost:8999',\r\n      messages: [],\r\n      id1: {},\r\n      id2: {},\r\n      graphArr: Array(10).fill({}),\r\n      status: {\r\n        server: '',\r\n        info: '',\r\n        error: false\r\n      },\r\n    };\r\n  } \r\n\r\n  componentDidMount(){\r\n    // initializing Socket\r\n    this.socket = new WebSocket(this.state.socket);\r\n    this.setState({status: {...this.state.status, server: this.state.socket} });\r\n\r\n    // connected successfully\r\n    this.socket.onopen = () => {\r\n      this.setState({status: {...this.state.status, \r\n                              info: \"Connected\", \r\n                              error: false\r\n      }});\r\n    };\r\n\r\n    // received data from device and format it\r\n    this.socket.onmessage = event => { \r\n      let messages = JSON.parse(event.data);\r\n      this.setState({messages});\r\n      this.setState({id1: messages[0]});\r\n      this.setState({id2: messages[1]});\r\n      this.draw();\r\n    };\r\n\r\n    // encountered error\r\n    this.socket.onerror = err => {\r\n      this.setState({status: {...this.state.status, \r\n        info: `Socket encountered error: ${err.message}. Closing socket`, \r\n        error: true\r\n      }});\r\n      this.socket.close();\r\n    };\r\n\r\n    // connection lost\r\n    this.socket.onclose = event => {\r\n      if (event.wasClean)\r\n          this.setState({status: {...this.state.status, \r\n            info: `Socket was closed clearly, code=${event.code}`, \r\n            error: true\r\n          }});\r\n        else\r\n          this.setState({status: {...this.state.status, \r\n            info: 'Disconnect', \r\n            error: true\r\n          }});\r\n    };\r\n  };\r\n\r\n  // create and modifying incoming data + check data values less then 100\r\n  draw = () => {\r\n    if (this.state.id1.data<=100 && this.state.id2.data<=100) {\r\n      let array = [...this.state.graphArr];\r\n      array.shift();\r\n      array.push({legend: array.length + 1, ID1: this.state.id1.data, ID2: this.state.id2.data });\r\n      this.setState({graphArr: array.map((item, idx) => { \r\n        return {...item, legend: (idx+1).toString()}\r\n      })});\r\n    }\r\n  }\r\n  \r\n  hundred = number => { if (number > 100) return \"warning\" };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <header className=\"header\">\r\n          <div className=\"header__trunc\">\r\n            <p className=\"header__trunc__title\">WILIOT</p>\r\n            <p className=\"header__trunc__subtitle\">Demo version</p>\r\n          </div>\r\n        </header>\r\n\r\n        <div className=\"wrapper\">\r\n          <div className=\"temp\">\r\n            <span className=\"temp__block\">\r\n              <p className=\"temp__block__id\">ID1</p>\r\n              <p>Temperature: <strong>{this.state.id1.temperature}</strong> &deg;C; &nbsp;\r\n                <span className={this.hundred(this.state.id1.data)}>\r\n                  data: <strong>{this.state.id1.data}</strong>.\r\n                </span>\r\n              </p>\r\n            </span>\r\n            <span className=\"temp__block-space\">&nbsp;</span>\r\n            <span className=\"temp__block\">\r\n              <p className=\"temp__block__id\">ID2</p>\r\n              <p>Temperature: <strong>{this.state.id2.temperature}</strong> &deg;C; &nbsp;\r\n                <span className={this.hundred(this.state.id2.data)}>\r\n                  data: <strong>{this.state.id2.data}</strong>.\r\n                </span>\r\n              </p>\r\n            </span>\r\n          </div>\r\n\r\n          <ResponsiveContainer height={400} debounce={1}>\r\n            <AreaChart\r\n              data={this.state.graphArr}\r\n              margin={{ top: 20, right: 0, left: 10, bottom: 5 }}\r\n            >\r\n              <defs>\r\n                <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                  <stop offset=\"5%\" stopColor=\"#002df4\" stopOpacity={0.6}/>\r\n                  <stop offset=\"95%\" stopColor=\"#002df4\" stopOpacity={0}/>\r\n                </linearGradient>\r\n                <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                  <stop offset=\"5%\" stopColor=\"#b100ba\" stopOpacity={0.45}/>\r\n                  <stop offset=\"95%\" stopColor=\"#b100ba\" stopOpacity={0}/>\r\n                </linearGradient>\r\n              </defs>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"legend\" />\r\n              <YAxis label={{ value: 'Data', angle: -90, offset: 0, position: 'insideLeft', \r\n                     fontSize: 26, fontWeight: 'bold' }} \r\n              />\r\n              <Legend iconSize={20} />\r\n              <Tooltip />\r\n              <Area type=\"monotoneX\" dataKey=\"ID1\" stroke=\"#002df4\" strokeWidth={2} \r\n                    fillOpacity={1} fill=\"url(#colorUv)\"\r\n                    animationDuration={750} animationEasing=\"ease-in-out\"\r\n              />\r\n              <Area type=\"monotoneX\" dataKey=\"ID2\" stroke=\"#b100ba\" strokeWidth={2} \r\n                    fillOpacity={1} fill=\"url(#colorPv)\" \r\n                    animationDuration={750} animationEasing=\"ease-in-out\"\r\n              />\r\n            </AreaChart>\r\n          </ResponsiveContainer>\r\n\r\n          <StatusBar status={this.state.status} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\n// <LineChart\r\n//   data={this.state.graphArr}\r\n//   margin={{ top: 20, right: 0, left: 0, bottom: 5 }}\r\n// >\r\n//   <CartesianGrid strokeDasharray=\"3 3\" />\r\n//   <XAxis dataKey=\"legend\" />\r\n//   <YAxis />\r\n//   <Legend iconSize={20} />\r\n//   <Line type=\"monotoneX\" dataKey=\"ID1\" stroke=\"#002df4\" strokeWidth={2} \r\n//     animationDuration={700} animationEasing=\"ease-in-out\"\r\n//   />\r\n//   <Line type=\"monotoneX\" dataKey=\"ID2\" stroke=\"#b100ba\" strokeWidth={2} \r\n//     animationDuration={700} animationEasing=\"ease-in-out\"              \r\n//   />\r\n// </LineChart>","import React from 'react';\r\n\r\nexport const WebSocketServer = () => {\r\n  return (\r\n    <script src=\"/react_ws_wiliot/server.js\"></script>\r\n  );\r\n}\r\n\r\n// <script src=\"/js/main.js\" type=\"text/babel\"></script>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/Main/';\nimport { WebSocketServer } from './components/WebSocketServer/';\n\nReactDOM.render(\n  <React.StrictMode>\n    <WebSocketServer />\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}